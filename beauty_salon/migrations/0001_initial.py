# Generated by Django 4.2.20 on 2025-06-26 21:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.CharField(blank=True, max_length=30, null=True, verbose_name='Кто оставил отзыв')),
                ('comment', models.TextField(max_length=250, verbose_name='Отзыв')),
                ('create_at', models.DateField(blank=True, null=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15, verbose_name='Мастер')),
                ('image', models.FileField(blank=True, upload_to='media/master_img/', verbose_name='Картинка')),
                ('specialty', models.CharField(blank=True, max_length=35, verbose_name='Специальность')),
                ('experience_at', models.DateField(blank=True, max_length=35, null=True, verbose_name='Опыт')),
            ],
            options={
                'verbose_name': 'Мастер',
                'verbose_name_plural': 'Мастера',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('recorded', 'Записан'), ('completed', 'Выполнен'), ('canceled', 'Отменен'), ('call', 'Консультация')], default='recorded', max_length=20, verbose_name='Статус записи')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='RU', verbose_name='Телефон')),
                ('payment', models.CharField(blank=True, choices=[('cash', 'Наличностью'), ('e_pay', 'Электронно')], default='cash', max_length=15, null=True, verbose_name='Тип оплаты')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Комментарий')),
                ('personal_data_consent', models.BooleanField(default=False, verbose_name='Согласие ОПД')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название салона')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='Адрес')),
                ('contact_phone', models.CharField(blank=True, max_length=50, verbose_name='Контактный телефон')),
                ('image', models.FileField(blank=True, upload_to='media/salon_img/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Салон',
                'verbose_name_plural': 'Салоны',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Услуга')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
                ('image', models.FileField(blank=True, upload_to='media/service_img/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='OrderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_time_at', models.CharField(blank=True, choices=[('10:00', '10:00'), ('11:00', '11:00'), ('12:00', '12:00'), ('13:00', '13:00'), ('15:00', '15:00'), ('16:00', '16:00'), ('17:00', '17:00'), ('18:00', '18:00'), ('19:00', '19:00')], max_length=20, null=True, verbose_name='Время записи')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='master_services', to='beauty_salon.master', verbose_name='Мастер')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='beauty_salon.order', verbose_name='Запись')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salon_services', to='beauty_salon.salon', verbose_name='Салон')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_items', to='beauty_salon.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'элемент записи',
                'verbose_name_plural': 'элементы записи',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='RU', verbose_name='Телефон')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='static/img/avatars/')),
                ('personal_data_consent', models.BooleanField(default=False, verbose_name='Согласие ОПД')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SalonServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='masters', to='beauty_salon.master', verbose_name='Мастер')),
                ('salon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='salons', to='beauty_salon.salon', verbose_name='Салон')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='beauty_salon.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Услгуга в салоне',
                'verbose_name_plural': 'Услгуги в салоне',
                'unique_together': {('master', 'service', 'salon')},
            },
        ),
    ]
